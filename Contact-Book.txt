import json

# Contact Manager Class
class ContactManager:
    def __init__(self):
        self.contacts = []
        self.load_contacts()

    def load_contacts(self):
        try:
            with open('contacts.json', 'r') as f:
                self.contacts = json.load(f)
        except FileNotFoundError:
            self.contacts = []

    def save_contacts(self):
        with open('contacts.json', 'w') as f:
            json.dump(self.contacts, f, indent=4)

    def add_contact(self):
        name = input("Enter name: ")
        phone = input("Enter phone number: ")
        email = input("Enter email: ")
        address = input("Enter address: ")
        self.contacts.append({'name': name, 'phone': phone, 'email': email, 'address': address})
        self.save_contacts()
        print("Contact added successfully!")

    def view_contacts(self):
        if not self.contacts:
            print("No contacts available.")
            return
        print("\nContact List:")
        for i, contact in enumerate(self.contacts, start=1):
            print(f"{i}. {contact['name']} - {contact['phone']}")
        print()

    def search_contact(self):
        query = input("Enter name or phone number to search: ").lower()
        results = [c for c in self.contacts if query in c['name'].lower() or query in c['phone']]
        if results:
            print("\nSearch Results:")
            for contact in results:
                print(f"Name: {contact['name']}")
                print(f"Phone: {contact['phone']}")
                print(f"Email: {contact['email']}")
                print(f"Address: {contact['address']}\n")
        else:
            print("No contacts found.")

    def update_contact(self):
        query = input("Enter name or phone number of the contact to update: ").lower()
        for contact in self.contacts:
            if query in contact['name'].lower() or query in contact['phone']:
                print("\nCurrent Details:")
                print(f"Name: {contact['name']}")
                print(f"Phone: {contact['phone']}")
                print(f"Email: {contact['email']}")
                print(f"Address: {contact['address']}\n")

                contact['name'] = input("Enter new name (leave blank to keep current): ") or contact['name']
                contact['phone'] = input("Enter new phone number (leave blank to keep current): ") or contact['phone']
                contact['email'] = input("Enter new email (leave blank to keep current): ") or contact['email']
                contact['address'] = input("Enter new address (leave blank to keep current): ") or contact['address']
                
                self.save_contacts()
                print("Contact updated successfully!")
                return
        print("Contact not found.")

    def delete_contact(self):
        query = input("Enter name or phone number of the contact to delete: ").lower()
        for contact in self.contacts:
            if query in contact['name'].lower() or query in contact['phone']:
                self.contacts.remove(contact)
                self.save_contacts()
                print("Contact deleted successfully!")
                return
        print("Contact not found.")

    def menu(self):
        while True:
            print("\n--- Contact Manager ---")
            print("1. Add Contact")
            print("2. View Contact List")
            print("3. Search Contact")
            print("4. Update Contact")
            print("5. Delete Contact")
            print("6. Exit")

            choice = input("Choose an option: ")
            if choice == '1':
                self.add_contact()
            elif choice == '2':
                self.view_contacts()
            elif choice == '3':
                self.search_contact()
            elif choice == '4':
                self.update_contact()
            elif choice == '5':
                self.delete_contact()
            elif choice == '6':
                print("Exiting Contact Manager.")
                break
            else:
                print("Invalid choice. Please try again.")

# Main
if __name__ == "__main__":
    manager = ContactManager()
    manager.menu()
